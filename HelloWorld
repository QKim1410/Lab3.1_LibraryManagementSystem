package LibraryManagement;
import java.awt.EventQueue;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JLabel;
import java.awt.Font;
import java.awt.Color;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JButton;
import javax.swing.JComponent;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.awt.event.ActionEvent;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import java.util.Stack;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.util.List;
import javax.swing.TransferHandler;
public class library extends JFrame {
  private static final long serialVersionUID = 1L;
  private JPanel contentPane;
  
  private DefaultListModel<String> unsortedBookListModel;
  private DefaultListModel<String> sortedBookListModel;
  private DefaultListModel<String> sortedBookList2Model; 
  private JList<String> unsortedBookList;
  private JList<String> sortedBookList;
  private JList<String> sortedBookList2; 
  private Stack<String[]> undoStack;
  private ArrayList<String> bookList;
  public static void main(String[] args) {
      EventQueue.invokeLater(new Runnable() {
          public void run() {
              try {
                  library frame = new library();
                  frame.setVisible(true);
              } catch (Exception e) {
                  e.printStackTrace();
              }
          }
      });
  }
  public library() {
      setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      setBounds(100, 100, 1023, 794);
      contentPane = new JPanel();
      contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
      bookList = new ArrayList<>();
      undoStack = new Stack<>();
      bookList.add("Harry Potter");
      bookList.add("Anatomy and Physiology");
      bookList.add("TimeKeeper");
      bookList.add("Titanic");
      bookList.add("Lord of the Rings");
      bookList.add("English Text Book");
      bookList.add("Algebra Mathematics");
      bookList.add("The Little Prince");
      bookList.add("Hercules");
      bookList.add("Peter Pan");
      bookList.add("Pride and Prejudice");
      setContentPane(contentPane);
      contentPane.setLayout(null);
      JLabel lblNewLabel = new JLabel("Library");
      lblNewLabel.setBounds(10, 11, 250, 67);
      lblNewLabel.setFont(new Font("Georgia", Font.BOLD, 30));
      contentPane.add(lblNewLabel);
      JPanel panel = new JPanel();
      panel.setBounds(0, 69, 1007, 75);
      panel.setBackground(new Color(216, 214, 133));
      contentPane.add(panel);
      panel.setLayout(null);
      JLabel lblNewLabel_1 = new JLabel("BookList");
      lblNewLabel_1.setFont(new Font("Georgia", Font.BOLD, 30));
      lblNewLabel_1.setBounds(10, 11, 153, 53);
      panel.add(lblNewLabel_1);
      JLabel lblNewLabel_3 = new JLabel("Category 1");
      lblNewLabel_3.setBounds(345, 225, 652, 24);
      lblNewLabel_3.setFont(new Font("Tahoma", Font.PLAIN, 18));
      contentPane.add(lblNewLabel_3);
      JLabel lblNewLabel_3_1 = new JLabel("Category 2");
      lblNewLabel_3_1.setBounds(345, 419, 652, 24);
      lblNewLabel_3_1.setFont(new Font("Tahoma", Font.PLAIN, 20));
      contentPane.add(lblNewLabel_3_1);
      unsortedBookListModel = new DefaultListModel<>();
      unsortedBookList = new JList<>(unsortedBookListModel);
      unsortedBookList.setBounds(10, 224, 325, 380);
      contentPane.add(unsortedBookList);
      unsortedBookList.setDragEnabled(true);
      unsortedBookList.setTransferHandler(new ListTransferHandler());
      updateBookList(); 
      JPanel panel_1 = new JPanel();
      panel_1.setBounds(10, 155, 325, 60);
      panel_1.setBackground(new Color(128, 255, 255));
      contentPane.add(panel_1);
      panel_1.setLayout(null);
      JLabel lblNewLabel_2 = new JLabel("UnSorted BookList");
      lblNewLabel_2.setFont(new Font("Georgia", Font.BOLD, 28));
      lblNewLabel_2.setBounds(20, 11, 317, 38);
      panel_1.add(lblNewLabel_2);
      JPanel panel_1_1 = new JPanel();
      panel_1_1.setBounds(345, 153, 652, 60);
      panel_1_1.setBackground(new Color(128, 255, 255));
      contentPane.add(panel_1_1);
      panel_1_1.setLayout(null);
      JLabel lblNewLabel_2_1 = new JLabel("Sorted BookList");
      lblNewLabel_2_1.setFont(new Font("Georgia", Font.BOLD, 28));
      lblNewLabel_2_1.setBounds(191, 11, 244, 38);
      panel_1_1.add(lblNewLabel_2_1);
      sortedBookListModel = new DefaultListModel<>();
      sortedBookList = new JList<>(sortedBookListModel);
      sortedBookList.setBounds(345, 260, 652, 159);
      contentPane.add(sortedBookList);
      sortedBookList.setDropMode(DropMode.INSERT);
      sortedBookList.setTransferHandler(new ListTransferHandler());
      sortedBookList2Model = new DefaultListModel<>(); 
      sortedBookList2 = new JList<>(sortedBookList2Model);
      sortedBookList2.setBounds(345, 454, 652, 150);
      contentPane.add(sortedBookList2);
      sortedBookList2.setDropMode(DropMode.INSERT);
      sortedBookList2.setTransferHandler(new ListTransferHandler());
      JPanel panel_2 = new JPanel();
      panel_2.setBounds(0, 615, 1007, 129);
      panel_2.setLayout(null);
      panel_2.setBackground(new Color(216, 214, 133));
      contentPane.add(panel_2);
      JButton btnAddBook = new JButton("Add a Book");
      btnAddBook.setBackground(new Color(0, 255, 64));
      btnAddBook.setForeground(new Color(0, 0, 0));
      btnAddBook.setFont(new Font("Georgia", Font.PLAIN, 30));
      btnAddBook.setBounds(10, 11, 325, 107);
      panel_2.add(btnAddBook);
      btnAddBook.addActionListener(new ActionListener() {
    	    public void actionPerformed(ActionEvent e) {
    	        String newBook = JOptionPane.showInputDialog("Enter a new book to add:");
    	        if (newBook != null && !newBook.trim().isEmpty()) {
    	            if (bookList.contains(newBook.trim())) {
    	                JOptionPane.showMessageDialog(library.this, "This book already exists in the list.", "Error", JOptionPane.ERROR_MESSAGE);
    	                return;
    	            }
    	            int insertChoice = JOptionPane.showConfirmDialog(library.this, "Would you like to insert the book at a specific index?", "Insert Choice", JOptionPane.YES_NO_OPTION);
    	            if (insertChoice == JOptionPane.YES_OPTION) {
    	                String indexStr = JOptionPane.showInputDialog("Enter the index to insert the book:");
    	                try {
    	                    int index = Integer.parseInt(indexStr);
    	                    if (index >= 0 && index <= bookList.size()) {
    	                        bookList.add(index, newBook.trim());
    	                        
    	                        undoStack.push(new String[]{"remove", newBook.trim(), "unsorted"}); 
    	                        updateBookList();
    	                    } else {
    	                        JOptionPane.showMessageDialog(library.this, "Index out of range.", "Error", JOptionPane.ERROR_MESSAGE);
    	                    }
    	                } catch (NumberFormatException ex) {
    	                    JOptionPane.showMessageDialog(library.this, "Invalid index entered. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
    	                }
    	            } else {
    	                bookList.add(newBook.trim());
    
    	                undoStack.push(new String[]{"remove", newBook.trim(), "unsorted"}); 
    	                updateBookList();
    	            }
    	        }
    	    }
    	});

      JButton btnRemoveABook = new JButton("Remove a Book");
      btnRemoveABook.setBackground(new Color(255, 0, 0));
      btnRemoveABook.addActionListener(new ActionListener() {
          public void actionPerformed(ActionEvent e) {
              String selectedBook = unsortedBookList.getSelectedValue();
              if (selectedBook != null) {
                
                  bookList.remove(selectedBook);
                  undoStack.push(new String[]{"add", selectedBook, "unsorted"});
                  updateBookList();
              } else {
                  selectedBook = sortedBookList.getSelectedValue();
                  if (selectedBook != null) {
              
                      sortedBookListModel.removeElement(selectedBook);
                      undoStack.push(new String[]{"add", selectedBook, "sorted1"});
                      bookList.remove(selectedBook);
                  } else {
                      selectedBook = sortedBookList2.getSelectedValue(); 
                      if (selectedBook != null) {
            
                          sortedBookList2Model.removeElement(selectedBook);
                          undoStack.push(new String[]{"add", selectedBook, "sorted2"});
                          bookList.remove(selectedBook);
                      } else {
                          JOptionPane.showMessageDialog(library.this, "Please select a book to remove.");
                      }
                  }
              }
          }
      });
      btnRemoveABook.setFont(new Font("Georgia", Font.PLAIN, 30));
      btnRemoveABook.setBounds(345, 11, 342, 107);
      panel_2.add(btnRemoveABook);
      JButton btnUndo = new JButton("Undo");
      btnUndo.setBackground(new Color(255, 255, 0));
      btnUndo.setFont(new Font("Georgia", Font.PLAIN, 30));
      btnUndo.setBounds(700, 11, 297, 107);
      panel_2.add(btnUndo);
      btnUndo.addActionListener(new ActionListener() {
    	    public void actionPerformed(ActionEvent e) {
    	        if (!undoStack.isEmpty()) {
    	            String[] lastAction = undoStack.pop();
    	            String actionType = lastAction[0];
    	            String bookTitle = lastAction[1];
    	            String targetList = lastAction[2];

    	            if ("move".equals(actionType)) {
    	                if ("sorted1".equals(targetList)) {
    	                    sortedBookListModel.removeElement(bookTitle); 
    	                    unsortedBookListModel.addElement(bookTitle); 
    	                    bookList.add(bookTitle);
    	                    selectionSort(sortedBookListModel);
    	        
    	                } else if ("sorted2".equals(targetList)) {
    	                    sortedBookList2Model.removeElement(bookTitle); 
    	                    unsortedBookListModel.addElement(bookTitle); 
    	                    bookList.add(bookTitle);
    	                    selectionSort(sortedBookList2Model);
    	                }
    	            } else if ("add".equals(actionType)) {
    	                if ("unsorted".equals(targetList)) {
    	              
    	                    unsortedBookListModel.addElement(bookTitle);
    	                    bookList.add(bookTitle); 
    	                } else if ("sorted1".equals(targetList)) {
    	             
    	                    sortedBookListModel.addElement(bookTitle);
    	                    selectionSort(sortedBookListModel);
    	                } else if ("sorted2".equals(targetList)) {
    	             
    	                    sortedBookList2Model.addElement(bookTitle);
    	                    selectionSort(sortedBookList2Model);
    	                }
    	            }
    	            if ("remove".equals(actionType)) {
    	              
    	                unsortedBookListModel.removeElement(bookTitle); 
    	                bookList.remove(bookTitle); 
    	            }
    	            updateBookList(); 
    	        } else {
    	            JOptionPane.showMessageDialog(library.this, "No actions to undo.");
    	        }
    	    }
    	});
      JButton btnSortBooks = new JButton("Sort Books");
      btnSortBooks.setBackground(new Color(0, 255, 255));
      btnSortBooks.setFont(new Font("Georgia", Font.PLAIN, 30));
      btnSortBooks.setBounds(700, 138, 297, 107);
      panel_2.add(btnSortBooks);
      btnSortBooks.addActionListener(new ActionListener() {
          public void actionPerformed(ActionEvent e) {
              sortedBookListModel.clear();
              bookList.stream().sorted().forEach(sortedBookListModel::addElement);
          }
      });
      JButton btnSortBooks2 = new JButton("Sort Books 2");
      btnSortBooks2.setBackground(new Color(0, 255, 255));
      btnSortBooks2.setFont(new Font("Georgia", Font.PLAIN, 30));
      btnSortBooks2.setBounds(700, 255, 297, 107);
      panel_2.add(btnSortBooks2);
      btnSortBooks2.addActionListener(new ActionListener() {
          public void actionPerformed(ActionEvent e) {
              sortedBookList2Model.clear();
              bookList.stream().sorted().forEach(sortedBookList2Model::addElement); 
          }
      });
  }
  private void updateBookList() {
      unsortedBookListModel.clear();
      bookList.forEach(unsortedBookListModel::addElement);
  }
  private class ListTransferHandler extends TransferHandler {

      public Transferable createTransferable(JComponent c) {
          JList<?> source = (JList<?>) c;
          List<?> selectedValues = source.getSelectedValuesList();
          return new StringSelection(String.join(",", (List<String>) selectedValues));
      }
      public int getSourceActions(JComponent c) {
          return COPY_OR_MOVE;
      }
      public boolean canImport(TransferSupport support) {
          return support.isDataFlavorSupported(DataFlavor.stringFlavor);
      }
      public boolean importData(TransferSupport support) {
          if (!canImport(support)) {
              return false;
          }
          JList<?> target = (JList<?>) support.getComponent();
          DefaultListModel<String> targetModel = (DefaultListModel<String>) target.getModel();
          DefaultListModel<String> sourceModel = (DefaultListModel<String>) (target == unsortedBookList ? sortedBookListModel : unsortedBookListModel);
          try {
              String data = (String) support.getTransferable().getTransferData(DataFlavor.stringFlavor);
              String[] booksToAdd = data.split(",");
              for (String book : booksToAdd) {
                  book = book.trim(); 
                  if (!targetModel.contains(book)) {
                      targetModel.addElement(book);
                      sourceModel.removeElement(book);
                     

                      if (bookList.contains(book)) {
                          bookList.remove(book);
                      }
                      String targetList = target == sortedBookList ? "sorted1" : "sorted2"; 
                      undoStack.push(new String[]{"move", book, targetList}); 
                  }
              }
              if (target == sortedBookList) {
                  selectionSort(targetModel);
              }
              if (target == sortedBookList2) {
                  selectionSort(targetModel);
              }
              return true;
          } catch (Exception e) {
              e.printStackTrace();
          }
          return false;
      }
  }
  private void selectionSort(DefaultListModel<String> model) {
	    int n = model.getSize();
	    for (int i = 0; i < n - 1; i++) {
	        int minIndex = i;
	        for (int j = i + 1; j < n; j++) {
	            if (model.get(j).compareTo(model.get(minIndex)) < 0) {
	                minIndex = j;
	            }
	        }

	        if (minIndex != i) {
	            String temp = model.get(i);
	            model.set(i, model.get(minIndex));
	            model.set(minIndex, temp);
	        }
	    }
	}
}



